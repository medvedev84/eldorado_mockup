package ru.terralink.mvideo.sap;

/**
 * Generated by Sybase AFX Compiler with templateJ
 * Compiler version - 2.3.0.183
 * mbs - false 
 */
@SuppressWarnings("all")
public final class Mvideo5DB extends com.sybase.persistence.Database
{
    /** Begin code region: static variable definition and init **/
    private static boolean _needSync;
    private static com.sybase.persistence.ConnectionProfile _profile =
        new com.sybase.persistence.ConnectionProfile("mvideo41_0");

    private static com.sybase.persistence.CallbackHandler _callbackHandler;

    private static String _appName;
    private static boolean _created = false;
    
    static
    {
        com.sybase.sup.client.persistence.ContextRepository.getInstance().setSyncType(com.sybase.sup.client.persistence.ContextRepository.SyncType.RBS);
    }
    
    protected static com.sybase.sup.client.persistence.DatabaseDelegate DELEGATE = com.sybase.sup.client.persistence.DelegateFactory.createDatabaseDelegate();
    
    private static class Mvideo5DBHolder {
       final static Mvideo5DB instance = new Mvideo5DB();
    }

    public static Mvideo5DB getInstance() {
       return Mvideo5DBHolder.instance;
    }
    
    /**
     * get the current Connection Profile  
     */
    public static com.sybase.persistence.ConnectionProfile getConnectionProfile()
    {
        return _profile;
    }

    /**
     * get the current Synchronization Connection Profile  
     */
    public static com.sybase.persistence.ConnectionProfile getSynchronizationProfile()
    {
        return _profile.getSyncProfile();
    }
    
    private static ru.terralink.mvideo.sap.intrnl.Mvideo5DBMetaData META_DATA = new ru.terralink.mvideo.sap.intrnl.Mvideo5DBMetaData(DELEGATE);
    /**
     * Sybase internal use only.
     */
    public static com.sybase.reflection.DatabaseMetaData getMetaData()
    {
        return META_DATA;
    }
    
    private static com.sybase.persistence.Logger _logger = new com.sybase.persistence.AbstractLogger()
    {
        public  com.sybase.persistence.LogRecord newLogRecord(int level, String message)
        {
            com.sybase.persistence.LogRecord log = createRealLogRecord();
            log.setLevel(level);
            log.setMessage(message);
            log.setTimestamp(com.sybase.afx.util.DateTimeUtil.currentUTCTime());
            log.save();
            return log;
        }
        protected  com.sybase.persistence.LogRecord createRealLogRecord()
        {
            return new LogRecordImpl();
        }
    };
    
    static
    {
    }
    
    public static synchronized void setApplication(com.sybase.mobile.Application app)
    {
        com.sybase.sup.client.mbs.RegistryUtil.setApplicationContext(app.getInstance().getApplicationContext());
        initialize();
    }
    
    /**
     * Initialize the package.
     * It needs only be called once.
     */
    public static synchronized void initialize()
    {
        android.content.Context context=com.sybase.sup.client.mbs.RegistryUtil.getRequiredApplicationContext();
        _appName = context.getApplicationContext().getPackageCodePath();
        com.sybase.persistence.ConnectionProfile.setPath(context.getApplicationContext().getFilesDir().getAbsolutePath());
        com.sybase.persistence.ConnectionProfile _cp0 = com.sybase.persistence.ConnectionProfile.find(_profile.getName());
        if (_cp0 != null)
        {
            _profile = _cp0;
        }
        else
        {
            _profile.setProperty("databaseFile", "mvideo41_0.ulj");
            getConnectionProfile().setPageSize(8192);
        }
        com.sybase.persistence.ConnectionProfile _cp = com.sybase.persistence.ConnectionProfile.find(getSynchronizationProfile().getName());
        if (_cp != null)
        {
            _profile.setSyncProfile(_cp);
        }
        _profile.getSyncProfile().setProperty("packageName","mvideo5:1.0" );
        com.sybase.persistence.ConnectionProfile initProfile = new com.sybase.persistence.ConnectionProfile();
        initProfile.setServerName("1sap232");
        initProfile.setPortNumber(2480);
        initProfile.setNetworkProtocol("http,https");
        initProfile.setNetworkStreamParams("trusted_certificates=;url_suffix=;custom_header=\"X_SUP_APPCID:" + com.sybase.mo.MessagingClientLib.getInstance().getDeviceID()+ "\"");
        initProfile.setDomainName("default");
        DELEGATE.setInitialSyncProfile(initProfile);
        DELEGATE.init("mvideo5:1.0", "ru.terralink.mvideo.sap", META_DATA, _profile, getDSI());
    }

    
    private Mvideo5DB()
    {
        super(getMetaData());
    }
       
    private static String getDbPath()
    {
        String tmpDbPath = _profile.getProperty("databaseFile");
        String retDbPath = "";
            retDbPath = tmpDbPath;
        return retDbPath;
    }
    
    private static com.sybase.afx.ulj.DataSourceInfo getDSI()
    {
        com.sybase.afx.ulj.DataSourceInfo _dsi = new com.sybase.afx.ulj.DataSourceInfo();
        _dsi.setContext(com.sybase.sup.client.mbs.RegistryUtil.getRequiredApplicationContext());
        _dsi.setConnectionProfile(getConnectionProfile());
        return _dsi;
    }
    
    /**
     * Create local database
     */
    public static void createDatabase()
    {
        DELEGATE.createDatabase();
    }

    /**
     * Delete local database
     */
    public static void deleteDatabase()
    {
        DELEGATE.deleteDatabase();
    }
    
    /**
     * Synchronize the synchronizationGroup with the server  
     * 
     * @param synchronizationGroup The synchronization group name.
     */
    public static void synchronize (String synchronizationGroup)
    {
        DELEGATE.synchronize (synchronizationGroup);
    }
        
    /**
     * Synchronize all the synchronizationGroups with the server using custom syncStatusListener,
     * listener is for monitoring mobilink synchronization status.
     * 
     * @param listener The synchronization status listener.
     */
    public static void synchronize(com.sybase.persistence.SyncStatusListener listener)
    {
         DELEGATE.synchronize(null, null, listener);
    }
        
    /**
     * Synchronize the synchronizationGroups with the server using custom syncStatusListener,
     * listener is for monitoring mobilink synchronization status.
     * 
     * @param synchronizationGroup The synchronization group name.
     * @param listener The synchronization status listener.
     */
    public static void synchronize (String synchronizationGroup, com.sybase.persistence.SyncStatusListener listener)
    {
         DELEGATE.synchronize(synchronizationGroup, null, listener);
    }
    	
    /**
     * Synchronize all the synchronizationGroups with the server
     */
    public static void synchronize()
    {
         DELEGATE.synchronize();
    }
    /**
     * Begin a local transaction.  
     */
    public static com.sybase.persistence.LocalTransaction beginTransaction()
    {
        return DELEGATE.beginTransaction();
    }
    
        
    /**
	 * Sybase internal use only.
	 */
    public static com.sybase.sup.client.persistence.DatabaseDelegate getDelegate()
    {
        return DELEGATE;
    }
    
    /**
     * Subscribe to the package  
     */
    public static void subscribe()
    {
        DELEGATE.subscribe();
    }
    
    /**
     * unsubscribe all synchronization parameter.  
     */
    public static void unsubscribe()
    {
        DELEGATE.unsubscribe();
    }
    
    /**
     * Returns the synchronization user name.  
     */
    public static String getSyncUsername()
    {
        return com.sybase.afx.DatabaseBase.getSyncUsername(getSynchronizationProfile());
    }
     
    /**
     * Returns the package name.  
     */
    public static String getPackageName()
    {
        return "mvideo5:1.0";
    }
    
    /**
     * Returns the database schema version.  
     */
    public static int getSchemaVersion()
    {
        return DELEGATE.getSchemaVersion();
    }
    
    /**
     * Returns the protocol version of the package.  
     */
    public static int getProtocolVersion()
    {
        return DELEGATE.getProtocolVersion();
    }
    
    /**
     * @deprecated  
     */
    public static void loginToSync()
    {
        String username = getSynchronizationProfile().getUserName();
	    String password = getSynchronizationProfile().getPassword();
		DELEGATE.loginToSync(username, password);
    }
    
    /**
     * @deprecated  
     */
    public static void loginToSync(String username, String password)
    {
        DELEGATE.loginToSync(username, password);
    }
    
    /**
     * return true if the synchronizationGroup was synchronized  
     */
    public static boolean isSynchronized(String synchronizationGroup)
    {
        return DELEGATE.isSynchronized(synchronizationGroup);
    }

    /**
     * Gets the last synchronization time for the specified synchronization group.
     * @param synchronizationGroup The synchronization group name.
     * @return The last synchronization time.
     */
    public static java.util.Date getLastSynchronizationTime(String synchronizationGroup)
    {
        return DELEGATE.getLastSynchronizationTime(synchronizationGroup);
    }
    
    /**
     * Gets the log records based on the query filtering.
     * @param query Query object.
     * @return Log records.
     */
    public static com.sybase.collections.GenericList<com.sybase.persistence.LogRecord> getLogRecords(com.sybase.persistence.Query query)
    {
        return (com.sybase.collections.GenericList<com.sybase.persistence.LogRecord>)(Object)(ru.terralink.mvideo.sap.LogRecordImpl.findWithQuery(query));
    }
    
    /**
     * Gets the Logger for the package.
     * @return The Logger for the package.
     */
    public static com.sybase.persistence.Logger getLogger()
    {
        return _logger;
    }
    
    /**
     * Submit log records to server  
     */
    public static void submitLogRecords()
    {
        DELEGATE.submitLogRecords();
    }
    /**
     * Returns the synchronization parameters.  
     */
    public static synchronized ru.terralink.mvideo.sap.PersonalizationParameters getPersonalizationParameters()
    {
        return (ru.terralink.mvideo.sap.PersonalizationParameters) DELEGATE.getPersonalizationParameters();
    }
    /**
     * Execute a dynamic query against local database.
     * @param query query object
     * @return Query result set
     */
    public static com.sybase.persistence.QueryResultSet executeQuery(com.sybase.persistence.Query query)
    {
        return DELEGATE.executeQuery(query);
    }
    /**
     * Check if local database exists
     */
    public static boolean databaseExists()
    {
        return DELEGATE.databaseExists();
    }
    
    /**
     * Install a callback handler
     * 
     * @param callbackHandler The CallbackHandler to be registered.
     */
    public static void registerCallbackHandler(com.sybase.persistence.CallbackHandler callbackHandler)
    {
        DELEGATE.registerCallbackHandler(callbackHandler);
    }
    
    public static com.sybase.persistence.CallbackHandler getCallbackHandler()
    {
    	return DELEGATE.getCallbackHandler();
    }
    
    /**
     * Retrieves currently queued background synchronization requests.
     * @return Queued background synchronization requests.
     */
    public static com.sybase.collections.GenericList<com.sybase.persistence.SynchronizationRequest> getBackgroundSyncRequests()
    {
    	return DELEGATE.getBackgroundSyncRequests();
    }

    /**
     * Clean all the data in the client database
     * @param keepClientOnly Keep client only entity data after clean.
     */
    public static void cleanAllData(boolean keepClientOnly)
    {
        DELEGATE.cleanAllData(keepClientOnly);
    }

    /**
     * Clean all the data in the client database. Keep the clientOnly data.  
     */
    public static void cleanAllData()
    {
        DELEGATE.cleanAllData(true);
    }
    
    /**
     * Submit all the pending operations regarding to the synchronizationGroup (ready for sending to server).  
     * 
     * @param synchronizationGroup The synchronization group name.
     */
    public static void submitPendingOperations(String synchronizationGroup)
    {
        DELEGATE.submitPendingOperations(synchronizationGroup);
    }

    /**
     * Submit all the pending operations.  
     */
    public static void submitPendingOperations()
    {
        DELEGATE.submitPendingOperations(null);
    }
    
    /**
     * Cancel all the pending operations (not submitted operations).  
     */
    public static void cancelPendingOperations()
    {
        DELEGATE.cancelPendingOperations();
    }
    
    /**
     * Begin synchronize of the specified synchronization groups at a background thread.  
     * The synchronize will be upload+download
     * 
     * @param sgs The list of synchronization groups.
     * @param context The user provided context.
     */
    public static void beginSynchronize(com.sybase.collections.GenericList<com.sybase.persistence.SynchronizationGroup> sgs,Object context)
    {
        DELEGATE.beginSynchronize(sgs, context, false);
    }

    /**
     * Begin synchronize of the specified synchronization groups at a background thread.  
     * 
     * @param sgs The list of synchronization groups.
     * @param context The user provided context.
     * @param uploadOnly If true, the synchronization is to send data from client to server only for non-DOE.
     *  This parameter is ignored for DOE applications.
     */
    public static void beginSynchronize(com.sybase.collections.GenericList<com.sybase.persistence.SynchronizationGroup> sgs,Object context, boolean uploadOnly)
    {
        DELEGATE.beginSynchronize(sgs, context, uploadOnly);
    }
    
    /**
     * Authenticate against the server.  
     */
    public static void onlineLogin()
    {
        String username = getSynchronizationProfile().getUserName();
	    String password = getSynchronizationProfile().getPassword();
		DELEGATE.onlineLogin(username, password);
    }
    
    /**
     * Authenticate against the server.  
     */
    /**
     * @deprecated  
     */
    public static void onlineLogin(String username, String password)
    {
        DELEGATE.onlineLogin(username, password);
    }
    
    
    public static void recover()
    {
    	DELEGATE.recover();
    }
    
    public static int getSubscriptionStatus()
    {
    	return DELEGATE.getSubscriptionStatus();
    }
    
    /**
     * Authenticate against last successfully authenticated credential
     */
    /**
     * @deprecated  
     */
    public static boolean offlineLogin()
    {
    	String username = getSynchronizationProfile().getUserName();
	    String password = getSynchronizationProfile().getPassword();
        return DELEGATE.offlineLogin(username, password);
    }
    
    /**
     * Authenticate against last successfully authenticated credential
     */
    /**
     * @deprecated  
     */
    public static boolean offlineLogin(String username, String password)
    {
        return DELEGATE.offlineLogin(username, password);
    }

    /**
     * Return true if all replays are uploaded.  
     */
    public static boolean isReplayQueueEmpty()
    {
        return DELEGATE.isReplayQueueEmpty();
    }
    /**
     * generate the encryption key.  
     */
    public static void generateEncryptionKey()
    {
        DELEGATE.generateEncryptionKey();
    }
    
    /**
     * Returns a SynchronizationGroup instance.
     * @param syncGroup The synchronization group name.
     * @return SynchronizationGroup instance.
     */
    public static com.sybase.persistence.SynchronizationGroup getSynchronizationGroup(String syncGroup)
    {
        if (!META_DATA.getSynchronizationGroups().contains(syncGroup))
        {
            return null;
        }
        return DELEGATE.getSynchronizationGroup(syncGroup);
    }

    /**
     * Sybase internal use only
     */
    public static com.sybase.persistence.ConnectionWrapper acquireDBReadConnection()
    {
        return DELEGATE.acquireDBReadConnection();
    }
    
    /**
     * Sybase internal use only.
     */
    public static com.sybase.persistence.ConnectionWrapper acquireDBWriteConnection()
    {
        return DELEGATE.acquireDBWriteConnection();
    }
    
    /**
     * Sybase internal use only.
     */
    public static void releaseDBConnection()
    {
        DELEGATE.releaseDBConnection();
    }
    
    /**
     * Acquiring a database connection could be time-consuming. Application can use this method to pre-allocate a database connection to get better performance.
     */
    public static void openConnection()
    {
        DELEGATE.openConnection();
    }
    
    /**
     * Normally when application exits, database connection resources would be cleaned up. This method can be used in application shutdown phase to proactively release database connection resources. But we should not call this method during application running.
     */
    public static void closeConnection()
    {
        DELEGATE.closeConnection();
    }
    
    /**
     * Enable change log  
     */
    public static void enableChangeLog()
    {
        getSynchronizationProfile().setProperty("changeLogEnabled", "true");
    }
    
    /**
     * Disable change log  
     */
    public static void disableChangeLog()
    {
        getSynchronizationProfile().setProperty("changeLogEnabled", "false");
    }
    
    /**
     * Delete all the change logs in the client.  
     */
    public static void deleteChangeLogs()
    {
        ru.terralink.mvideo.sap.ChangeLogImpl.deleteChangeLogs();
    }
    
    /**
     * Gets the change logs based on the query filtering.
     * @param query Query object.
     * @return Change logs.
     */
    public static com.sybase.collections.GenericList<com.sybase.persistence.ChangeLog> getChangeLogs(com.sybase.persistence.Query query)
    {
        return DELEGATE.getChangeLogs(query);
    }
    
    
    
    /**
     * Get the PIM store manager,must be called after initialize,other wise exception will be throw
     * @return PimStoreManager the PIM store manager
     */
    public static com.sybase.sup.pim.PimStoreManager getPimStoreManager()
    {
    	return com.sybase.mo.MessagingClientLib.getInstance().getPimStoreManager();
    }
}